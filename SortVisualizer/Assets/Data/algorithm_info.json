[
  {
    "Id": "BubbleSort",
    "Name": "Bubble Sort",
    "Description": "Bubble Sort is a fundamental comparison-based sorting algorithm that operates by repeatedly traversing a sequence and comparing adjacent elements, exchanging them whenever they are found to be in the incorrect order. Through successive iterations, larger elements are gradually relocated toward the end of the sequence, while smaller elements progressively move toward the beginning, thereby producing a sorted arrangement. The algorithm derives its name from the manner in which smaller elements appear to 'bubble' upward through the list during the sorting process. Developed in the early years of computer science, it serves primarily as an educational tool due to its conceptual clarity, despite being inefficient for large datasets.",
    "CodeSnippet": "using System;\n\npublic static void BubbleSort(int[] arr)\n{\n    for (int i = 0; i < arr.Length - 1; i++)\n    {\n        for (int j = 0; j < arr.Length - i - 1; j++)\n        {\n            if (arr[j] > arr[j + 1])\n            {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n} \n \n \n",
    "Pros": [
      "Conceptually simple and easy to implement",
      "Stable sorting algorithm",
      "Operates in-place with constant memory requirements",
      "Optimizable to detect already sorted arrays and exit early"
    ],
    "Cons": [
      "Highly inefficient for large datasets",
      "Worst-case and average-case time complexity is O(n^2)",
      "Performs unnecessary comparisons and swaps compared to more advanced algorithms"
    ],
    "AdditionalInfo": {
      "Description": "Bubble Sort is a fundamental comparison-based sorting algorithm that operates by repeatedly traversing a sequence and comparing adjacent elements, exchanging them whenever they are found to be in the incorrect order. Through successive iterations, larger elements are gradually relocated toward the end of the sequence, while smaller elements progressively move toward the beginning, thereby producing a sorted arrangement. The algorithm derives its name from the manner in which smaller elements appear to 'bubble' upward through the list during the sorting process. Developed in the early years of computer science, it serves primarily as an educational tool due to its conceptual clarity, despite being inefficient for large datasets.",
      "Complexity": {
        "BestCase": "O(n)",
        "AverageCase": "O(n^2)",
        "WorstCase": "O(n^2)",
        "SpaceComplexity": "O(1)"
      }
    }
  },
  {
    "Id": "QuickSort",
    "Name": "Quick Sort",
    "Description": "Quick Sort is an efficient, comparison-based, divide-and-conquer sorting algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then recursively sorted. Quick Sort is widely used in practice due to its efficiency on large datasets and its relatively simple implementation.",
    "CodeSnippet": "using System;\n\npublic static void QuickSort(int[] arr, int low, int high)\n{\n    if (low < high)\n    {\n        int pivotIndex = Partition(arr, low, high);\n        QuickSort(arr, low, pivotIndex - 1);\n        QuickSort(arr, pivotIndex + 1, high);\n    }\n}\n\nprivate static int Partition(int[] arr, int low, int high)\n{\n    int pivot = arr[high];\n    int i = low - 1;\n\n    for (int j = low; j < high; j++)\n    {\n        if (arr[j] <= pivot)\n        {\n            i++;\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n\n    int temp1 = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp1;\n\n    return i + 1;\n} \n \n \n \n ",
    "Pros": [
      "Highly efficient for large datasets",
      "Average-case time complexity is O(n log n)",
      "In-place sorting (requires only a small stack)",
      "Widely used and well-understood"
    ],
    "Cons": [
      "Worst-case time complexity is O(n^2) (can be mitigated with random pivot)",
      "Not stable by default",
      "Recursive implementation can cause stack overflow for very large datasets"
    ],
    "AdditionalInfo": {
      "Description": "Quick Sort is an efficient, comparison-based, divide-and-conquer sorting algorithm. It works by selecting a 'pivot' element and partitioning other elements relative to it, then recursively sorting the partitions.",
      "Complexity": {
        "BestCase": "O(n log n)",
        "AverageCase": "O(n log n)",
        "WorstCase": "O(n^2)",
        "SpaceComplexity": "O(log n)"
      }
    }
  },
  {
    "Id": "InsertionSort",
    "Name": "Insertion Sort",
    "Description": "Insertion Sort is a simple comparison-based algorithm that builds the final sorted array one element at a time. It works by taking each element from the input and inserting it at the correct position in the already sorted part of the array. While inefficient for large datasets, it is highly effective for small arrays and nearly sorted data.",
    "CodeSnippet": "using System;\n\npublic static void InsertionSort(int[] arr)\n{\n    for (int i = 1; i < arr.Length; i++)\n    {\n        int key = arr[i];\n        int j = i - 1;\n\n        while (j >= 0 && arr[j] > key)\n        {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n\n        arr[j + 1] = key;\n    }\n}\n \n \n",
    "Pros": [
      "Simple and easy to implement",
      "Efficient for small or nearly sorted datasets",
      "Stable sorting algorithm",
      "In-place sorting with constant memory"
    ],
    "Cons": [
      "Inefficient for large datasets",
      "Worst-case time complexity is O(n^2)",
      "Performs many comparisons and shifts for large unsorted data"
    ],
    "AdditionalInfo": {
      "Description": "Insertion Sort incrementally builds a sorted sequence by inserting each new element into its correct position.",
      "Complexity": {
        "BestCase": "O(n)",
        "AverageCase": "O(n^2)",
        "WorstCase": "O(n^2)",
        "SpaceComplexity": "O(1)"
      }
    }
  },
  {
    "Id": "SelectionSort",
    "Name": "Selection Sort",
    "Description": "Selection Sort is a comparison-based algorithm that repeatedly selects the smallest (or largest) element from the unsorted portion of the array and moves it to the sorted portion. It is conceptually simple and requires minimal memory, but its inefficiency on large datasets makes it primarily an educational tool.",
    "CodeSnippet": "using System;\n\npublic static void SelectionSort(int[] arr)\n{\n    for (int i = 0; i < arr.Length - 1; i++)\n    {\n        int minIndex = i;\n        for (int j = i + 1; j < arr.Length; j++)\n        {\n            if (arr[j] < arr[minIndex])\n            {\n                minIndex = j;\n            }\n        }\n\n        if (minIndex != i)\n        {\n            int temp = arr[i];\n            arr[i] = arr[minIndex];\n            arr[minIndex] = temp;\n        }\n    }\n} \n \n \n",
    "Pros": [
      "Simple to understand and implement",
      "In-place sorting with constant memory",
      "Performs a predictable number of swaps",
      "No additional memory required"
    ],
    "Cons": [
      "Inefficient for large datasets",
      "Time complexity is always O(n^2)",
      "Not stable unless modified"
    ],
    "AdditionalInfo": {
      "Description": "Selection Sort repeatedly finds the minimum element from the unsorted portion and moves it to the sorted portion.",
      "Complexity": {
        "BestCase": "O(n^2)",
        "AverageCase": "O(n^2)",
        "WorstCase": "O(n^2)",
        "SpaceComplexity": "O(1)"
      }
    }
  }
]